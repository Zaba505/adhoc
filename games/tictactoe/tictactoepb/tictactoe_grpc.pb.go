// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tictactoepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicTacToeClient is the client API for TicTacToe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicTacToeClient interface {
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Join(ctx context.Context, opts ...grpc.CallOption) (TicTacToe_JoinClient, error)
}

type ticTacToeClient struct {
	cc grpc.ClientConnInterface
}

func NewTicTacToeClient(cc grpc.ClientConnInterface) TicTacToeClient {
	return &ticTacToeClient{cc}
}

func (c *ticTacToeClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/tictactoepb.TicTacToe/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeClient) Join(ctx context.Context, opts ...grpc.CallOption) (TicTacToe_JoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &TicTacToe_ServiceDesc.Streams[0], "/tictactoepb.TicTacToe/Join", opts...)
	if err != nil {
		return nil, err
	}
	x := &ticTacToeJoinClient{stream}
	return x, nil
}

type TicTacToe_JoinClient interface {
	Send(*ClientGameEvent) error
	Recv() (*ServerGameEvent, error)
	grpc.ClientStream
}

type ticTacToeJoinClient struct {
	grpc.ClientStream
}

func (x *ticTacToeJoinClient) Send(m *ClientGameEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ticTacToeJoinClient) Recv() (*ServerGameEvent, error) {
	m := new(ServerGameEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TicTacToeServer is the server API for TicTacToe service.
// All implementations must embed UnimplementedTicTacToeServer
// for forward compatibility
type TicTacToeServer interface {
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Join(TicTacToe_JoinServer) error
	mustEmbedUnimplementedTicTacToeServer()
}

// UnimplementedTicTacToeServer must be embedded to have forward compatible implementations.
type UnimplementedTicTacToeServer struct {
}

func (UnimplementedTicTacToeServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedTicTacToeServer) Join(TicTacToe_JoinServer) error {
	return status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedTicTacToeServer) mustEmbedUnimplementedTicTacToeServer() {}

// UnsafeTicTacToeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicTacToeServer will
// result in compilation errors.
type UnsafeTicTacToeServer interface {
	mustEmbedUnimplementedTicTacToeServer()
}

func RegisterTicTacToeServer(s grpc.ServiceRegistrar, srv TicTacToeServer) {
	s.RegisterService(&TicTacToe_ServiceDesc, srv)
}

func _TicTacToe_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tictactoepb.TicTacToe/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToe_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TicTacToeServer).Join(&ticTacToeJoinServer{stream})
}

type TicTacToe_JoinServer interface {
	Send(*ServerGameEvent) error
	Recv() (*ClientGameEvent, error)
	grpc.ServerStream
}

type ticTacToeJoinServer struct {
	grpc.ServerStream
}

func (x *ticTacToeJoinServer) Send(m *ServerGameEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ticTacToeJoinServer) Recv() (*ClientGameEvent, error) {
	m := new(ClientGameEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TicTacToe_ServiceDesc is the grpc.ServiceDesc for TicTacToe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicTacToe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tictactoepb.TicTacToe",
	HandlerType: (*TicTacToeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _TicTacToe_Start_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Join",
			Handler:       _TicTacToe_Join_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "games/tictactoe/tictactoe.proto",
}
